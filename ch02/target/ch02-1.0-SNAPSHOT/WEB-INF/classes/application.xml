<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>
    <bean id="myDataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="spring"></property>
        <property name="password" value="111111"></property>
    </bean>

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean" >
        <property name="dataSource" ref="myDataSource"></property>
        <property name="configLocation" value="classpath:mybatis.xml"></property>
    </bean>

    <!-- 创建dao对象，使用sqlSession的getMapper(StudentDao.class)
      MapperScannerConfigurator:在内部调用getMapper()生成每个dao接口的代理对象
      -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>

        <!--  getMapper() 根据接口对应xml文件创建Dao接口的实现，使用的接口方式的动态代理-->
        <!-- 指定包名，包名是dao接口所在的包名
         MapperScannerConfigurer会扫描这个包中的所有接口，把每个接口都执行一次getMapper()方法，得到每个接口的dao对象，默认名称是接口名首字母小写
         创建好的dao对象放到了Spring容器中
         -->
        <property name="basePackage" value="ding.local.dao"></property>
    </bean>

    <bean id="userService" class="ding.local.services.imp.UserServiceImpl">
        <property name="userDao" ref="userDao"></property>
    </bean>

    <!-- 事务管理器    -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!--  必须知道所连接的数据库信息   -->
        <property name="dataSource" ref="myDataSource"></property>
    </bean>

    <!-- 通过aspectJ 添加事务，首先要配置事务管理器   -->
    <tx:advice id="transAdvice" transaction-manager="transactionManager">
        <!--  配置事务属性   -->
        <tx:attributes>
            <tx:method name="add*"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <!-- 任意包中的sevice任意子包的任意方法,参数任意  -->
        <aop:pointcut id="servicePt" expression="execution(* *..services..*.*(..))"/>
        <!--  配置切面:关联advice 和pointcut
            advice-ref:通知，上面tx:advice哪里的配置，即使切面
            pointcut-ref: 切入点表达式的id
        -->
        <aop:advisor advice-ref="transAdvice" pointcut-ref="servicePt"></aop:advisor>
    </aop:config>


</beans>